{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","todoStore/dataTypes.js","todoStore/initData.js","todoStore/actionTypes.js","todoStore/actionCreators.js","todoStore/index.js","todoStore/modelReducer.js","components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","className","this","props","todo","checked","type","name","id","title","onChange","onCheck","content","onClick","onDelete","Component","TodoList","todolist","map","todoItem","key","dataTypes","initData","actionTypes","ADD","DELETE","SORTE","CHECK","createStore","dataStore","action","dataType","payload","filter","item","TodoApp","checkTodo","sorteTodo","deleteTodo","addItem","newItem_content","document","querySelector","value","undefined","addTodo","Date","getTime","onTyping","e","keyCode","onKeyDown","placeholder","todoList","mapDispatchToProps","todoId","connect","todoStore","App","Boolean","window","location","hostname","match","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eaadcd1a.chunk.js","sourcesContent":["import React, { Component } from \"react\"\n\nexport default class TodoItem extends Component {\n    render(){\n        return (\n            <div className={this.props.todo.checked ? \"todo-item done\" : \"todo-item not-yet\" }>\n                <div className=\"todo-checked\">\n                    <input type=\"checkbox\" name=\"todo-checked\" id=\"todo-checked\" title={this.props.todo.checked ? \"done\" : \"not-yet\" } checked={ this.props.todo.checked } onChange={() => this.props.onCheck(this.props.todo.id)}/>\n                </div>\n                <div className=\"todo-content\">\n                    <p>{this.props.todo.content}</p>\n                </div>    \n                <div className=\"todo-delete\">\n                    <button className=\"fa fa-trash\" title=\"Delete\" onClick={() => this.props.onDelete(this.props.todo.id)}></button>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\"\nimport TodoItem from \"./TodoItem\"\n\nexport default class TodoList extends Component {\n\n    render(){\n        return this.props.todolist.map(todoItem => <TodoItem onCheck={this.props.onCheck} onDelete={this.props.onDelete} todo={todoItem} key={todoItem.id} /> )\n    }\n}","export const dataTypes = {\n    TODO: \"todo\"\n}","import { dataTypes } from \"./dataTypes\";\n\nexport const initData = {\n    [dataTypes.TODO]: [\n        {\n            id: 0,\n            content: \"Wubba lubba dub duuuub!\",\n            checked: true\n        }\n    ]\n}","export const actionTypes = {\n    ADD: \"add\",\n    DELETE: \"delete\",\n    SORTE: \"sorte\",\n    CHECK: \"check\"\n}","import { dataTypes } from \"./dataTypes\";\nimport { actionTypes } from \"./actionTypes\";\n\nexport const addTodo = (todo) => {\n    return {\n        dataType: dataTypes.TODO,\n        type: actionTypes.ADD,\n        payload: todo\n    }\n}\n\nexport const deleteTodo = (todoId) => {\n    return {\n        dataType: dataTypes.TODO,\n        type: actionTypes.DELETE,\n        payload: todoId\n    }\n}\n\nexport const sorteTodo = () => {\n    return {\n        dataType: dataTypes.TODO,\n        type: actionTypes.SORTE,\n        payload: null\n    }\n}\n\nexport const checkTodo = (todoId) => {\n    return {\n        dataType: dataTypes.TODO,\n        type: actionTypes.CHECK,\n        payload: todoId\n    }\n}","import { createStore } from \"redux\"\nimport { modelReducer } from \"./modelReducer\"\n\nexport default createStore(modelReducer)\nexport { addTodo, deleteTodo, sorteTodo, checkTodo } from \"./actionCreators\"","import { initData } from \"./initData\"\nimport { actionTypes } from \"./actionTypes\"\n\nexport function modelReducer(dataStore, action) {\n    switch (action.type) {\n        case actionTypes.ADD:\n            return {\n                ...dataStore,\n                [action.dataType]: [...dataStore[action.dataType], action.payload]\n            }\n        case actionTypes.DELETE:\n            return {\n                ...dataStore,\n                [action.dataType]: dataStore[action.dataType].filter(item => item.id !== action.payload)\n            }\n\n        case actionTypes.SORTE:\n            return {\n                ...dataStore,\n                [action.dataType]: [...dataStore[action.dataType].filter(item => !item.checked), ...dataStore[action.dataType].filter(item => item.checked)]\n            }\n\n        case actionTypes.CHECK:\n            return {\n                ...dataStore,\n                [action.dataType]: [...dataStore[action.dataType].map(item => {\n                    if (item.id === action.payload)\n                        item.checked = !item.checked\n\n                    return item\n                })]\n            }\n\n        default:\n            return dataStore || initData\n    }\n} ","import React, { Component } from \"react\"\nimport TodoList from \"./TodoList\"\nimport { connect } from \"react-redux\"\nimport { addTodo, deleteTodo, sorteTodo, checkTodo } from \"./../todoStore\"\n\nclass TodoApp extends Component {\n\n    componentDidMount() {\n        this.props.sorteTodo()\n    }\n\n    onCheck = (id) => {\n        this.props.checkTodo(id)\n        this.props.sorteTodo()\n    }\n\n    onDelete = (id) => {\n        this.props.deleteTodo(id)\n    }\n\n    addItem = () => {\n        let newItem_content = document.querySelector(\"input.add-todo\").value\n        if (newItem_content !== \"\" && newItem_content !== undefined) {\n            this.props.addTodo({\n                id: new Date().getTime(),\n                content: newItem_content,\n                checked: false\n            })\n\n            this.props.sorteTodo()\n\n            document.querySelector(\"input.add-todo\").value = null\n        }\n\n    }\n\n    onTyping = (e) => {\n        if (e.keyCode === 13)\n            this.addItem()\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"header\">\n                    <h1>The-Todo-App</h1>\n                    <div className=\"input\">\n                        <input onKeyDown={this.onTyping} type=\"text\" name=\"add-todo\" id=\"add-todo\" className=\"add-todo\" placeholder=\"Add a todo\" />\n                        <button onClick={this.addItem} className=\"add-btn fa fa-plus\"></button>\n                    </div>\n                </div>\n                <div className=\"main\">\n                    <TodoList onCheck={this.onCheck} onDelete={this.onDelete} todolist={this.props.todoList} />\n                </div>\n                <div className=\"footer\"></div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (todoStore) => ({ todoList: todoStore.todo })\n\nconst mapDispatchToProps = {\n    addTodo: addTodo,\n    deleteTodo: deleteTodo,\n    sorteTodo: sorteTodo,\n    checkTodo: checkTodo\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoApp)","import React, { Component } from 'react';\nimport TodoApp from \"./components/TodoApp\"\nimport \"./App.css\"\n\nexport default class App extends Component {\n  render() {\n    return (\n      <TodoApp />\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nimport { Provider } from \"react-redux\"\nimport todoStore from \"./todoStore\"\n\nReactDOM.render(<Provider store={todoStore}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}